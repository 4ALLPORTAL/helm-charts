{{- if false }}
apiVersion: batch/v1
{{- else }}
apiVersion: {{ include "common.capabilities.cronjob.apiVersion" . }}
{{- end }}
kind: CronJob
metadata:
  name: secret-sync
  namespace: {{ $.Release.Namespace }}
  labels: {{- include "common.labels.standard" $ | nindent 4 }}
spec:
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 50
  schedule: "* * * * *" # Every minute
  jobTemplate:
    {{- if .Values.janitor.enabled }}
    metadata:
      annotations:
        janitor/ttl: 1m
    {{- end }}
    spec:
      template:
        spec:
          volumes:
            - name: tmp
              emptyDir:
                medium: Memory
          securityContext:
            runAsGroup: 1000
            runAsUser: 1000
            runAsNonRoot: true
            fsGroup: 1000
          automountServiceAccountToken: true
          serviceAccountName: secret-sync
          restartPolicy: OnFailure
          containers:
            - &container
              name: secret-sync
              image: {{ template "base-cluster.kubectl.image" . }}
              {{- if .Values.global.kubectl.image.repository | contains "@" }}
              imagePullPolicy: IfNotPresent
              {{- else }}
              imagePullPolicy: Always
              {{- end }}
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                privileged: false
                readOnlyRootFilesystem: true
              volumeMounts:
                - mountPath: /tmp
                  name: tmp
              command:
                - bash
              args:
                - -ex
                - -c
                - |
                  {{- $certs := list }}
                  {{- $certs = append $certs "cluster-wildcard-certificate" }}
                  {{- range $cert, $_ := .Values.global.certificates }}
                  {{- $certs = append $certs (printf "%s-certificate" $cert) -}}
                  {{- end }}
                  {{- $credentials := .Values.global.imageCredentials | default list }}

                  cd /tmp

                  kubectl -n {{ .Release.Namespace }} get secrets {{ $credentials | join " " }} {{ $certs | join " " }} -o json | jq 'if .items then . else {apiVersion: "v1", kind: "List", items: [.]} end | .items = [.items[] | .metadata = {"name": .metadata.name, "labels": {"base-cluster/synced": "true"}}]' > secrets.json

                  rm -rf namespaces
                  mkdir namespaces
                  for namespace in $(kubectl get namespaces -o jsonpath='{.items[*].metadata.name}' --field-selector=metadata.name!={{- .Release.Namespace -}},status.phase=Active); do
                    cat secrets.json | jq ".items = [.items [] | .metadata.namespace=\"$namespace\"]" > namespaces/$namespace.json
                  done

                  kubectl apply -f namespaces/
                  kubectl replace -f namespaces/
            - <<: *container
              name: secret-cleanup
              args:
                - -ex
                - -c
                - |
                  {{- $fieldSelector := list }}
                  {{- range $list := list $certs $credentials }}
                  {{- range $secret := $list }}
                  {{- $fieldSelector = append $fieldSelector (printf "metadata.name!=%s" $secret) }}
                  {{- end }}
                  {{- end }}

                  kubectl get -A secrets -l base-cluster/synced=true --field-selector={{ $fieldSelector | join "," }}
